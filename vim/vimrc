" .vimrc with customized settings, plugins and mappings

" GENERIC SETTINGS
" status information and other helpful displays
" colors are set after the plugins have loaded
" the colorized statusline conveys a lot of information. see :help statusline
set nocompatible
set history=50
syntax on
set number
set noshowmode
set numberwidth=3
set ruler
set visualbell
set laststatus=2
set showcmd
set shiftround
set wrap
set title
set cursorline

" search settings
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
set matchtime=3

" file editing
filetype on
set autoread
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent

" autocompletion
set wildmenu
set wildmode=list:longest,full

" mouse support
set mouse=a

" more sane window splitting
set splitbelow
set splitright


" END GENERIC SETTINGS


" MAPPINGS 
" https://superuser.com/questions/693528/vim-is-there-a-downside-to-using-space-as-your-leader-key
let mapleader="\\"
nmap  <space> \
set timeoutlen=2500

" do not allow use of arrow keys
nmap <Left> :echo "use h"<CR>
nmap <Right> :echo "use l"<CR>
nmap <Up> :echo "use k"<CR>
nmap <Down> :echo "use j"<CR>

" Vimrc file Sourcing after changes, to take immediate effect
nmap  <leader>vs :source $MYVIMRC<CR>
" Vimrc file Edit 
nmap <leader>ve :e $MYVIMRC<CR>

" Window switching (normally all window operations start with <C-w>) with a
" count
" http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_2)#Supplying_a_count_to_a_map
nmap  <leader>wh :<C-U>exe v:count1 . "wincmd h"<CR>
nmap  <leader>wj :wincmd j<CR>
nmap  <leader>wk :wincmd k<CR>
nmap  <leader>wl :<C-U>exe v:count1 . "wincmd l"<CR>
nmap  <leader>ww :<C-U>exe v:count1 . "wincmd w"<CR>

" Resizing of windows (normally all window operations start with <C-w>)
nmap  <leader>rh :vertical resize -10<CR>
nmap  <leader>rj :resize -6<CR>
nmap  <leader>rk :resize +6<CR>
nmap  <leader>rl :vertical resize +10<CR>

" Relative Resizing of windows (normally all window operations start with <C-w>) 
nnoremap  <leader>rrh :exe "vertical resize " . (winwidth(0) * 2/3)<CR>
nnoremap  <leader>rrk :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap  <leader>rrj :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap  <leader>rrl :exe "vertical resize " . (winwidth(0) * 3/2)<CR>

" Nerdtree mappings
nmap <leader>ne : NERDTree<CR>
nmap <leader>nt : NERDTreeToggle<CR>
nmap <leader>nf : NERDTreeFocus<CR>
nmap <leader>nc : NERDTreeClose<CR>
nmap <leader>nq : NERDTreeClose<CR>

" Tagbar mappings
nmap  <leader>te : Tagbar<CR>
nmap  <leader>tt : TagbarToggle<CR>
nmap  <leader>tc : TagbarClose<CR>
nmap  <leader>tq : TagbarClose<CR>
nmap <F8> :TagbarToggle<CR>
" END MAPPINGS 






" PLUGINS 

" PRE PLUGIN MANAGER INSTALLATION
" vim-plug:https://github.com/junegunn/vim-plug
" central installation managed via .vimrc only. preferred above vundle and pathogen
if empty(glob('~/.vim/autoload/plug.vim'))
        silent !curl -s -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" LOAD PLUGINS
call plug#begin()
" for installation of new ones: ':PlugInstall'
" nerdtree file explorer
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" jinja2 syntax for ansible templates
Plug 'Glench/Vim-Jinja2-Syntax'
" surround text with quotes
Plug 'tpope/vim-surround'
" syntax checker
Plug 'vim-syntastic/syntastic'
" git wrapper
Plug 'https://github.com/tpope/vim-fugitive'
" css color hightlighting
Plug 'ap/vim-css-color'
" only show text
Plug 'junegunn/goyo.vim'
" javascript 
Plug 'pangloss/vim-javascript'
" json 
Plug 'leshill/vim-json'
" snippets engine
Plug 'SirVer/ultisnips'
" snippets library
Plug 'honza/vim-snippets'
"Plug 'Valloric/YouCompleteMe'
" you need to have ctags installed
" https://ricostacruz.com/til/navigate-code-with-ctags
" tagbar with code outline,
Plug 'majutsushi/tagbar'
" tags for php
Plug 'vim-php/tagbar-phpctags.vim'
"optimizer for ctags update
Plug 'craigemery/vim-autotag'
" display,toggle and navigate marks
Plug 'kshenoy/vim-signature'
" vim theme (lightweight and good philosophy)
Plug 'itchyny/lightline.vim'
" fuzzy finding
Plug 'ctrlpvim/ctrlp.vim'
" tiwg template engine
Plug 'lumiliet/vim-twig'
" groovy syntax 
Plug 'modille/groovy.vim'
" use gcc to comment out/in lines
" Plug 'tpope/vim-commentary'
" comments 
Plug 'scrooloose/nerdcommenter'
" ansible highlighting and file detection
Plug 'pearofducks/ansible-vim'
" use 'tab' for autocompletion
Plug 'ervandew/supertab'
" use auto completion for quotes/brackets etc
Plug 'Raimondi/delimitMate'
call plug#end()
" PLUGINtagbar
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1
let g:tagbar_type_groovy = {
      \ 'ctagstype' : 'groovy',
      \ 'kinds'     : [
      \ 'p:package:1',
      \ 'c:classes',
      \ 'i:interfaces',
      \ 't:traits',
      \ 'e:enums',
      \ 'm:methods:1',
      \ 'f:fields'
      \ ]
      \ }

let g:tagbar_type_ansible = {
      \ 'ctagstype' : 'ansible',
      \ 'kinds' : [
      \ 't:tasks:1'
      \ ],
      \ 'sort' : 0
      \ }
" PLUGIN NERDTREE
" autostart the nerdtree
" autocmd vimenter * NERDTree
" and then put focus on the previous (last accessed) window
" autocmd VimEnter * wincmd p
let NERDTreeShowBookmarks=1
 " Plugin lightline
 let g:lightline = {
       \ 'colorscheme': 'wombat',
       \ 'active': {
       \   'left': [ [ 'mode', 'paste' ],
       \             [ 'readonly', 'filename', 'modified', 'gitbranch','wintabbuf'] ]
       \,   'right': [ [ 'lineinfo' ],
       \              [ 'percent' ],
       \              [ 'fileformat', 'fileencoding', 'filetype'] ]
       \
       \ },
       \ 'component': {
       \ 'wintabbuf' : 'w%{tabpagewinnr(tabpagenr())}t%{tabpagenr()}b%n'
       \ },
       \ 'component_function': {
       \   'gitbranch': 'fugitive#head'
       \ },
       \ }
"let g:airline_section_z ='%h%y line:%02l/%L(%p%%) col:%02c win:%{tabpagewinnr(tabpagenr())} tab:%{tabpagenr()} buf:%n reg:%{v:register}'
"set statusline=%F%#important#%m%*%r\ %h%y\ line:%02l/%L(%p%%)\ col:%02c\ %=\ win:%{tabpagewinnr(tabpagenr())}\ tab:%{tabpagenr()}\ buf:%n\ reg:%{v:register}\ %#git#%{fugitive#statusline()}%*\ (%03b:0x%02B)\ %#hostname#%{hostname()}%* 
" PLUGIN ultisnips
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" PLUGIN SYNTASTIC
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
" PLUGIN ctrl-p
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor  --hidden -g ""'
  let g:ctrlp_use_caching = 0
endif
" END PLUGINS 

" COLOR ADJUSTMENTS. after the plugins have loaded
" http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
" colorscheme murphy 

